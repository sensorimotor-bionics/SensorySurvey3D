# -*- coding: utf-8 -*-
"""Bionic Breast Annotation Viewer.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1WRCZgqTnejCmzGzLWf44Sb3NA1Bj1x7M
"""

!pip install meshlib
!pip install plotly

import json
import random
import glob
import numpy as np
import meshlib.mrmeshnumpy as mmnp
import meshlib.mrviewerpy as mvp
import plotly.graph_objects as go
from plotly.subplots import make_subplots
from scipy.io import savemat

"""# **Bionic Breast Annotation Viewer**

Add all Survey3D json files to `annotation_paths`, noting which electrode each describes in the `electrodes` array. Ensure the model files referenced in these Survey3D files (i.e. Chest-PostOp.glb.json or Chest-PreOp.glb.json) are findable/in the appropriate path.
"""

annotation_paths = glob.glob('Survey3D*.json')
electrodes = [1]

"""Iterate through .json files in the `annotation_paths` filepath and sequentially load attributes into the `annotation_record` dictionary.

At the highest level, `annotation_record` is organized by model name. Each model can be reconstructed using the `'vertices'`, `'faces'`, and/or `'filename'` subfields. The `'electrodes'` subfield enumerates the recorded projected fields (`'fields'`) and projected field centroids (`'hotspots'`) associated with the stimulation of each electrode, along with a `'naturalness'` rating, a `'pain'` rating, and plain text `'qualities'` (descriptors delimited by `'_'`).
"""

annotation_record = {}
for electrode in range(len(electrodes)):
  annotation_path = annotation_paths[electrode]
  electrode_num = electrodes[electrode]

  with open(annotation_path) as json_data:
      data = json.load(json_data)

  participant = data['participant']
  model_options =  data['config']['models']
  sensation_types =  data['config']['typeList']
  hide_scale = data['config']['hideScaleValues']

  date = data['date']
  start_time = data['startTime']
  end_time = data['endTime']
  projected_fields = data['projectedFields']

  for pf in range(len(projected_fields)):
      projected_field = projected_fields[pf]
      this_model = projected_field['model']

      with open(model_options[this_model]+'.json') as json_mesh_data:
        mesh_data = json.load(json_mesh_data)

      # make a separate map for each of the qualities...
      if this_model not in annotation_record.keys():
          annotation_record[this_model] = {}
          mesh = mmnp.meshFromFacesVerts(np.array(mesh_data['faces']),np.array(mesh_data['vertices']))
          annotation_record[this_model]['vertices'] = mmnp.getNumpyVerts(mesh)
          numverts = len(annotation_record[this_model]['vertices'])
          annotation_record[this_model]['faces'] = mmnp.getNumpyFaces(mesh.topology)
          annotation_record[this_model]['filename'] = np.array(mesh_data['filename'])

          annotation_record[this_model]['electrodes'] = {}
          annotation_record[this_model]['electrodes'][electrode_num] = {}
          annotation_record[this_model]['electrodes'][electrode_num]['fields'] = {}
          annotation_record[this_model]['electrodes'][electrode_num]['hotspots'] = {}
          annotation_record[this_model]['electrodes'][electrode_num]['naturalness'] = {}
          annotation_record[this_model]['electrodes'][electrode_num]['pain'] = {}
          annotation_record[this_model]['electrodes'][electrode_num]['qualities'] = {}

          temp_field = np.zeros(numverts)
          temp_field[np.array(projected_field['vertices'])] = np.ones(len(projected_field['vertices']))
          annotation_record[this_model]['electrodes'][electrode_num]['fields'] = np.transpose(temp_field)
          hotspot = projected_field['hotSpot']
          annotation_record[this_model]['electrodes'][electrode_num]['hotspots'] = np.transpose(np.array([hotspot['x'],hotspot['y'],hotspot['z']]))
          annotation_record[this_model]['electrodes'][electrode_num]['naturalness'] = np.array([projected_field['naturalness']])
          annotation_record[this_model]['electrodes'][electrode_num]['pain'] = np.array([projected_field['pain']])

          all_qualities = ''
          for qual in range(len(projected_field['qualities'])):
              all_qualities = all_qualities+'_'+projected_field['qualities'][qual]['type']

          annotation_record[this_model]['electrodes'][electrode_num]['qualities'] = np.array(str(all_qualities))
      else:
          if electrode_num not in annotation_record[this_model]['electrodes'].keys():
              annotation_record[this_model]['electrodes'][electrode_num] = {}
              annotation_record[this_model]['electrodes'][electrode_num]['fields'] = {}
              annotation_record[this_model]['electrodes'][electrode_num]['hotspots'] = {}
              annotation_record[this_model]['electrodes'][electrode_num]['naturalness'] = {}
              annotation_record[this_model]['electrodes'][electrode_num]['pain'] = {}
              annotation_record[this_model]['electrodes'][electrode_num]['qualities'] = {}

          all_qualities = ''
          for qual in range(len(projected_field['qualities'])):
              all_qualities = all_qualities+'_'+projected_field['qualities'][qual]['type']

          if len(annotation_record[this_model]['electrodes'][electrode_num]['hotspots'])>0:
            temp_field = np.zeros(numverts)
            temp_field[np.array(projected_field['vertices'])] = np.ones(len(projected_field['vertices']))
            annotation_record[this_model]['electrodes'][electrode_num]['fields'] = np.stack((annotation_record[this_model]['electrodes'][electrode_num]['fields'],np.transpose(temp_field)),axis=0)
            hotspot = projected_field['hotSpot']
            annotation_record[this_model]['electrodes'][electrode_num]['hotspots'] = np.stack((annotation_record[this_model]['electrodes'][electrode_num]['hotspots'],np.array([hotspot['x'],hotspot['y'],hotspot['z']])),axis=0)
            annotation_record[this_model]['electrodes'][electrode_num]['naturalness'] = np.stack((annotation_record[this_model]['electrodes'][electrode_num]['naturalness'],np.array([projected_field['naturalness']])),axis=0)
            annotation_record[this_model]['electrodes'][electrode_num]['pain'] = np.stack((annotation_record[this_model]['electrodes'][electrode_num]['pain'],np.array([projected_field['pain']])),axis=0)
            annotation_record[this_model]['electrodes'][electrode_num]['qualities'] = np.stack((annotation_record[this_model]['electrodes'][electrode_num]['qualities'],np.array(str(all_qualities))),axis=0)
          else:
            temp_field = np.zeros(numverts)
            temp_field[np.array(projected_field['vertices'])] = np.ones(len(projected_field['vertices']))
            annotation_record[this_model]['electrodes'][electrode_num]['fields'] = np.transpose(temp_field)
            hotspot = projected_field['hotSpot']
            annotation_record[this_model]['electrodes'][electrode_num]['hotspots'] = np.transpose(np.array([hotspot['x'],hotspot['y'],hotspot['z']]))
            annotation_record[this_model]['electrodes'][electrode_num]['naturalness'] = np.array([projected_field['naturalness']])
            annotation_record[this_model]['electrodes'][electrode_num]['pain'] = np.array([projected_field['pain']])
            annotation_record[this_model]['electrodes'][electrode_num]['qualities'] = np.array(str(all_qualities))

"""Iterate over the electrodes in `'electrodes'` to plot all documented projected field maps as vertex color maps over the relevant mesh, averaging across multiple maps associated with a single electrode."""

verts_t = np.transpose(annotation_record[this_model]['vertices'])
faces_t = np.transpose(annotation_record[this_model]['faces'])

for electrode_num in annotation_record[this_model]['electrodes'].keys():
  if len(np.shape(annotation_record[this_model]['electrodes'][electrode_num]['fields']))>1:
    which_map = 255*np.mean(annotation_record[this_model]['electrodes'][electrode_num]['fields'],axis=0)
  else:
    which_map = 255*annotation_record[this_model]['electrodes'][electrode_num]['fields']

  base_map_1 = 0.5*np.ones(np.size(which_map,axis=0))
  base_map_2 = 0.5*np.ones(np.size(which_map,axis=0))
  color_map = np.stack((which_map,base_map_1,base_map_2),axis=1)

  fig = go.Figure(data=[go.Mesh3d(x=verts_t[0],y=verts_t[1],z=verts_t[2],
                                  i=faces_t[0],j=faces_t[1],k=faces_t[2],
                                  vertexcolor=color_map,
                                  opacity=1,
                                  lighting=dict(ambient=0.5, specular=0.2))],
                  layout={'width':500,
                          'title':"Electrode "+str(electrode_num),
                          'xaxis': go.layout.XAxis(color='rgb(255,255,255)')})
  fig.show()

"""Reformat `annotation_record` and export as a .mat struct. (Note: Throws an error if hotspots are of type 'None'.)"""

annotations = {'vertices':annotation_record[this_model]['vertices'],'faces':annotation_record[this_model]['faces'],'filename':annotation_record[this_model]['filename']}
for elec in electrodes:
  annotations.update({'electrode_'+str(elec) : annotation_record[this_model]['electrodes'][elec]})

savemat('data_composite.mat',{'annotation_record': annotations})